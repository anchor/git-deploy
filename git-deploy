#!/bin/bash


# XXX: This file is bollocks, it needs to be JUST the deployment, not the git-bump'ing

set -e

GIT_REPO_ROOT=$(git rev-parse --show-toplevel)
GIT_OPTS=""
OUTPUT_FILTER="cat" # no-op

commit_id_format=$(tput setaf 1)
date_format=$(tput bold; tput setaf 4)
author_format=$(tput setaf 2)
ref_name_format=$(tput setaf 3)
bold=$(tput bold)
red=$(tput setaf 1)
reset=$(tput sgr0)

function usage() {
    echo ""
    echo "git deploy <environment>"
    echo ""
    echo "Known environments:"
    find "$GIT_REPO_ROOT" -maxdepth 1 -name '.gitdeploy-*' -execdir basename {} \; | sed 's/^\.gitdeploy-/  /'
    echo ""
    echo "  See 'man git-deploy' for further information"
}

# actually parse the options and do stuff
while [[ $1 = -?* ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        --fetch)
            echo "Fetch updates"
            echo "    git fetch -q"
            ;;
        *) ;;
    esac

shift
done

if [ $# -ne 1 ] ; then
	usage
	exit 0
fi

DEPLOY_ENV=$1
echo "Deploying to: ${bold}${DEPLOY_ENV}${reset}"


DEPLOY_CONFIG=".gitdeploy-${DEPLOY_ENV}"
DEPLOY_CONFIG_PATH="${GIT_REPO_ROOT}/.gitdeploy-${DEPLOY_ENV}"
echo "Looking for config file: ${DEPLOY_CONFIG}"

if [ ! -f "${DEPLOY_CONFIG_PATH}" ] ; then
	echo "${red}Can't find deploy config ${DEPLOY_CONFIG} in the root of your repo, exiting.${reset}"
	exit 1
fi

NUM_TAGS=$(git tag -l "${DEPLOY_ENV}-v*" | wc -l)
if [ $NUM_TAGS -eq 0 ] ; then
	echo "${red}Can't find any tags for the ${DEPLOY_ENV} environment, please create one first:${reset}"
	echo "    git tag ${DEPLOY_ENV}-vNNN"
	exit 1
fi

echo "Matching tags:"
git tag -l "${DEPLOY_ENV}-v*" | sed 's/^/    /' | tac
echo

NEW_VERSION=$( git tag -l "${DEPLOY_ENV}-v*" | sed -r "s/^${DEPLOY_ENV}-v//" | tac | deploymentversionbumper.py bump_rc )
NEW_TAG="${DEPLOY_ENV}-v${NEW_VERSION}"
git tag "$NEW_TAG"


echo "Pushing new tag: ${green}${NEW_TAG}${reset}"
git push origin "$NEW_TAG"
echo

source "$DEPLOY_CONFIG_PATH"
#echo ssh "${GITDEPLOY_SSH_USER}@${GITDEPLOY_SSH_HOST}" -- make -C "$GITDEPLOY_DIR" "$GITDEPLOY_MAKETARGET" | head
echo ssh "${GITDEPLOY_SSH_USER}@${GITDEPLOY_SSH_HOST}" -- make -C "$GITDEPLOY_DIR" "$NEW_TAG"
ssh "${GITDEPLOY_SSH_USER}@${GITDEPLOY_SSH_HOST}" -- make -C "$GITDEPLOY_DIR" "$NEW_TAG"

